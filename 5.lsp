(defun clear-1 (lst)
  (mapcar (lambda (x) (remove #\  x)) lst))
  
(defun chk-rec (r)
  (= 2 (- (length r) (length (remove #\; r)))))
 
(defun clear-2 (lst)
  (let ((lst1 (clear-1 lst)))
     (remove-if-not #'chk-rec lst1)))
     
(defun cut-rec (rec)
  (let ((p1 nil)(r1 nil) 
        (p2 nil)(r2 nil)
        (p3 nil)(r3 nil))         
   (setf p1 (position #\; rec))
   (setf r1 (subseq rec 0 p1))
   (setf rec (subseq rec (+ 1 p1)))
   (setf p2 (position #\; rec))
   (setf r2 (subseq rec 0 p2))
   (setf rec (subseq rec (+ 1 p2)))
   (setf p3 (position #\; rec))
   (setf r3 (subseq rec 0 p3))
   (list r1 r2 r3)))
   
(defun add-ring (code tim lst)
  (cond ((null lst) (list (cons code tim)))
        ((= code (caar lst)) (cons (cons code (+ (cdar lst) tim)) (cdr lst)))
        (t (cons (car lst) (add-ring code tim (cdr lst))))))
        
(defun task (lst) 
  (let ((clst (clear-2 (clear-1 lst)))
        (freq nil)
        (r1 nil)
        (r2 nil)
        (r3 nil)
        (cod nil)
        (flst nil))        
     (mapcar #'(lambda (r) 
       (let ((tmp (cut-rec r))) 
             (setf r1 (car tmp))
             (setf r2 (cadr tmp))
             (setf r3 (caddr tmp))
         (when (or (string= "+49" (subseq r2 0 3)) (string= "+39" (subseq r2 0 3))) (setq freq (add-ring (parse-integer r1) (parse-integer r1) freq))))) clst)
         (caar (sort freq #'> :key #'cdr))))
                      
(defparameter cdr-list (read))
(print (task cdr-list))
